services:
  
  # api-java:
  #   extends:
  #     file: ./api-java/docker-compose.yaml
  #     service: api-java
  #   depends_on:
  #     rabbitmq:
  #        condition: service_healthy
      
  api-nestjs:
    extends:
      file: ./api-nestjs/docker-compose.yaml
      service: api-nestjs  
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - backend

  # api-flask:
  #   extends:
  #     file: ./api-flask/docker-compose.yaml
  #     service: api-flask
  #   depends_on:
  #     rabbitmq:
  #        condition: service_healthy

  api-golang:
    extends:
        file: ./api-golang/docker-compose.yaml
        service: api-golang
    depends_on:
      api-nestjs:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .env:/root/.env
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_ADMIN}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s
    command: >
      sh -c "
      rabbitmq-server &
      pid=\$!;
      echo 'Aguardando o RabbitMQ iniciar...';
      while ! rabbitmqctl status >/dev/null 2>&1; do sleep 1; done;
      rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWORD};
      rabbitmqctl set_permissions -p / ${RABBITMQ_USER} '.*' '.*' '.*';
      wait \$$pid"


  # database:
  #   image: postgres:15
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - backend
  #   environment:
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: database
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data    

networks:
  backend:
    driver: bridge
